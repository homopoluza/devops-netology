1. Используя знания из лекции по systemd, создайте самостоятельно простой unit-файл для node_exporter:

[Unit]
Description=Node Exporter
After=network.target

[Service]
User=node_exporter
Group=node_exporter
Type=simple
ExecStart=/usr/local/bin/node_exporter $OPTIONS

[Install]
WantedBy=multi-user.target

vagrant@vagrant:~$ sudo systemctl status node_exporter
● node_exporter.service - Node Exporter
     Loaded: loaded (/etc/systemd/system/node_exporter.service; enabled; vendor preset: enabled)
     Active: active (running) since Wed 2021-12-08 18:12:44 UTC; 36min ago

2. Ознакомьтесь с опциями node_exporter и выводом /metrics по-умолчанию. Приведите несколько опций, которые вы бы выбрали для базового мониторинга хоста по CPU, памяти, диску и сети.

curl http://localhost:9100/metrics

process_cpu_seconds_total
node_cpu_seconds_total
node_cpu_guest_seconds_total

process_virtual_memory_max_bytes
process_resident_memory_bytes
node_memory_SwapTotal_bytes
go_memstats_sys_bytes
go_memstats_heap_inuse_bytes

node_disk_read_bytes_total
node_disk_io_now
node_disk_io_time_seconds_total

node_network_receive_bytes_total
node_network_receive_errs_total
node_network_transmit_packets_total

3. Установите в свою виртуальную машину Netdata.

3.png

4. Можно ли по выводу dmesg понять, осознает ли ОС, что загружена не на настоящем оборудовании, а на системе виртуализации?

Да, осознает.

vagrant@vagrant:~$ dmesg | grep virt
[    0.006564] CPU MTRRs all blank - virtualized system.
[    0.047562] Booting paravirtualized kernel on KVM
[    8.848019] systemd[1]: Detected virtualization oracle.

5. Как настроен sysctl fs.nr_open на системе по-умолчанию? Узнайте, что означает этот параметр. Какой другой существующий лимит не позволит достичь такого числа (ulimit --help)?

vagrant@vagrant:~$ /sbin/sysctl -n fs.nr_open
1048576

The default value fs.nr_open is 1024*1024 = 1048576.
The maximum value of fs.nr_open is limited to sysctl_nr_open_max in kernel, which is 2147483584 on x86_64.

Лимит на количество открытых дескрипторов.

vagrant@vagrant:~$ ulimit -Sn - мягкий лимит. Может быть увеличен.
1024
vagrant@vagrant:~$ ulimit -Hn - жесткий лимит. Не может быть превышен.
1048576

6. Запустите любой долгоживущий процесс (не ls, который отработает мгновенно, а, например, sleep 1h) в отдельном неймспейсе процессов; покажите, что ваш процесс работает под PID 1 через nsenter. Для простоты работайте в данном задании под root (sudo -i). Под обычным пользователем требуются дополнительные опции (--map-root-user) и т.д.

vagrant@vagrant:~$ sudo -i
root@vagrant:~# unshare -f --pid --mount-proc sleep 1h&
[1] 1475
root@vagrant:~# nsenter -t 1475 --mount --pid -i bash
root@vagrant:/# lsns
        NS TYPE   NPROCS PID USER COMMAND
4026531835 cgroup      1   1 root sleep 1h
4026531837 user        1   1 root sleep 1h
4026531838 uts         1   1 root sleep 1h
4026531839 ipc         1   1 root sleep 1h
4026531992 net         1   1 root sleep 1h
4026532185 mnt         1   1 root sleep 1h
4026532186 pid         1   1 root sleep 1h

7. Найдите информацию о том, что такое :(){ :|:& };:. Запустите эту команду в своей виртуальной машине Vagrant с Ubuntu 20.04 (это важно, поведение в других ОС не проверялось). Некоторое время все будет "плохо", после чего (минуты) – ОС должна стабилизироваться. Вызов dmesg расскажет, какой механизм помог автоматической стабилизации. Как настроен этот механизм по-умолчанию, и как изменить число процессов, которое можно создать в сессии?

Функция с именем :, которая вызывает себя дважды в фоном режиме и порождает рекурсию. 

vagrant@vagrant:~$ -bash: fork: Resource temporarily unavailable

[ 1178.376160] cgroup: fork rejected by pids controller in /user.slice/user-1000.slice/session-3.scope

Можно предотвратить такие атаки, используя ulimit для ограничения количества processes-per-user:

$ ulimit -u 50
