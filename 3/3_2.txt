1. Какого типа команда cd? Попробуйте объяснить, почему она именно такого типа.

type -a cd
cd is a shell builtin

Потому что внешние программы не могут изменять текующую директорию shell.

2. Какая альтернатива без pipe команде grep <some_string> <some_file> | wc -l? 

grep <some_string> <some_file> -c

3. Какой процесс с PID 1 является родителем для всех процессов в вашей виртуальной машине Ubuntu 20.04?

systemd

4. Как будет выглядеть команда, которая перенаправит вывод stderr ls на другую сессию терминала?

ls 2>/dev/pts/X

5. Получится ли одновременно передать команде файл на stdin и вывести ее stdout в другой файл? Приведите работающий пример.

cat <in.txt>out.txt

6. Получится ли находясь в графическом режиме, вывести данные из PTY в какой-либо из эмуляторов TTY? Сможете ли вы наблюдать выводимые данные?

Можно, находясь в режиме терминала.

vagrant@vagrant:~$ tty
/dev/pts/0
vagrant@vagrant:~$ echo 'hello from 0' > /dev/pts/1
vagrant@vagrant:~$

vagrant@vagrant:~$ tty
/dev/pts/1
vagrant@vagrant:~$ hello from 0

7. Выполните команду bash 5>&1. К чему она приведет? Что будет, если вы выполните echo netology > /proc/$$/fd/5? Почему так происходит?

vagrant@vagrant:~$ bash 5>&1 #Создается файловый дескриптор 5 и перенаправляется в stdout. 
vagrant@vagrant:~$ echo netology > /proc/$$/fd/5 #Вывод netology в дескриптор 5
netology

8. Получится ли в качестве входного потока для pipe использовать только stderr команды, не потеряв при этом отображение stdout на pty? 

vagrant@vagrant:/proc/1855/fd$ ls /root  bash 7>&2 2>&1 1>&7 | grep 'open' -c
1

Перенаправляем новый дескриптор в stderr. stderr в stdout.  stout в новый дескриптор. 

vagrant@vagrant:/proc/1855/fd$ ls /root | grep 'open' -c
ls: cannot open directory '/root': Permission denied
0

9. Что выведет команда cat /proc/$$/environ? Как еще можно получить аналогичный по содержанию вывод?

Переменные окружение. Аналогичная комманда - env.

10. Используя man, опишите что доступно по адресам /proc/<PID>/cmdline, /proc/<PID>/exe.

 /proc/[pid]/cmdline
              This read-only file holds the complete command line for the process, unless the process is a zombie.  In the latter case, there is nothing
              in  this  file: that is, a read on this file will return 0 characters.  The command-line arguments appear in this file as a set of strings
              separated by null bytes ('\0'), with a further null byte after the last string.

Manual page proc(5) line 194/3283 8% (press h for help or q to quit)

Содержит полный путь до процесса.

/proc/[pid]/exe
              Under Linux 2.2 and later, this file is a symbolic link containing the actual pathname of the executed command.  This symbolic link can be
              dereferenced normally; attempting to open it will open the executable.  You can even type /proc/[pid]/exe to run another copy of the  same
              executable  that  is being run by process [pid].  If the pathname has been unlinked, the symbolic link will contain the string '(deleted)'
              appended to the original pathname.  In a multithreaded process, the contents of this symbolic link are not available if  the  main  thread
              has already terminated (typically by calling pthread_exit(3)).

 Manual page proc(5) line 241/3283 10% (press h for help or q to quit)

Содержит ссылку на исполняему комманду.

11.Узнайте, какую наиболее старшую версию набора инструкций SSE поддерживает ваш процессор с помощью /proc/cpuinfo.

vagrant@vagrant:/proc$ cat cpuinfo | grep sse

SSE 4.2

12. При открытии нового окна терминала и vagrant ssh создается новая сессия и выделяется pty. Это можно подтвердить командой tty, которая упоминалась в лекции 3.2. Однако:

vagrant@netology1:~$ ssh localhost 'tty'
not a tty

Почитайте, почему так происходит, и как изменить поведение.

vagrant@vagrant:~$ ssh localhost 'tty'
The authenticity of host 'localhost (::1)' can't be established.
ECDSA key fingerprint is SHA256:wSHl+h4vAtTT7mbkj2lbGyxWXWTUf6VUliwpncjwLPM.
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
Warning: Permanently added 'localhost' (ECDSA) to the list of known hosts.
vagrant@localhost's password:

У меня все работает. Но как я понял, TTY не выделен при удаленном подключении через SSH, и надо пользоваться флагом -t. 

13. Бывает, что есть необходимость переместить запущенный процесс из одной сессии в другую. Попробуйте сделать это, воспользовавшись reptyr. Например, так можно перенести в screen процесс, который вы запустили по ошибке в обычной SSH-сессии.

sudo apt-get install reptyr

У меня нет запущенных процессов кроме bash. Но алгоритм такой:

Suspend the process
Resume the process in the background
Disown the process
Launch a screen session
Find the PID of the process
Use reptyr to take over the process

14.sudo echo string > /root/new_file не даст выполнить перенаправление под обычным пользователем, так как перенаправлением занимается процесс shell'а, который запущен без sudo под вашим пользователем. Для решения данной проблемы можно использовать конструкцию echo string | sudo tee /root/new_file. Узнайте что делает команда tee и почему в отличие от sudo echo команда с sudo tee будет работать.

Команда tee одновременно выводит в и файл, и в stdout. Через pipe tee получает на вход stdout от echo и имеет права на запись, т.к. запущена от имени sudo.






